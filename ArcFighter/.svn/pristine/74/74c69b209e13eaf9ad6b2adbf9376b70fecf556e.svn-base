{*План работы.*

Это приблизительный план, скорее направление. Пункты плана необязательно будут одинаковые по усилиям/времени.
Он не обязателен к исполнению: захотите что-то сделать раньше, а что-то опустить - пожалуйста.

*Версия 1. Поле* //done
На экране базовое игровое поле, базовый фон. При нажатии определённой клавиши - программа закрывается.

*Версия 2. Игрок* //done
Посредине добавляется фигура игрока (пусть для начала это будет прямоугольник). При нажатии определённых клавиш он меняет своё положение.

*Версия 3. Враг* //done
Где-то на поле добавляется фигура врага (прямоугольник). Игрок может ходить вокруг врага (это должно быть видно), но не может зайти на его место.

*Версия 4. Удар* //done
По нажатию кнопки игрок наносит удар: меняется его изображение. Если в хитбоксе удара игрока был враг - враг исчезает.

*Версия 5. Анимация удара* //in time
Удар длиться не один кадр, а несколько. На время удара изображение игрока меняется. //done
Как вариант, на время удара игрок не двигается (не реагирует на нажатия клавиш).

*Версия 6. Удар врага* //in time
Если игрок находится в хитбоксе врага, враг наносит удар. //done
Запускается анимация удара врага, которая длится несколько кадров.
Враг не может наносить удар чаще какого-то времени. //done
Когда игрок "ударен", показывается сообщение.
Как вариант, после удара игрок отбрасывается на некоторое расстояние. //done

*Версия 7. Движение врага* //done
Враг двигается горизонтально в сторону игрока. Если дошёл до конца экрана - исчезает.

*Версия 8. Больше врагов* //done
Враги появляются с некоторой периодичностью с разных сторон экрана в разных точках экрана.
Исчезнувшие враги появляются снова.

*Версия 9. Хитпоинты*
У игрока и у врагов появляются хитпоинты.
Хитпоинты игрока показываются на экране, хитпоинты врагов скрыты. один удар снимает один хитпоинт.
Враг исчезает только когда хитпоинтов 0. Когда хитпоинты игрока 0 - игра заканчивается.

*Версия 10. Лучники*
Новый тип врагов: лучники. Они вместо удара запускают снаряд, который летит горизонтально.
Если игрок коснулся снаряда - это считается ударом.
Обычные враги теперь не просто идут по горизонтали, а идут в сторону игрока //done
}
{
перерисовываем враов
небольшие проблемы с колижонам
}


program arcFighter;

uses
	wingraph ,wincrt, sysutils;

const
	enemyInArray = 2;
	CountOfEnemy = enemyInArray - 1;

type
	TPosition = record
		x : real;
		y : real;
	end;

	THeroSprite = record
		moveleft : Integer;
		moveright : Integer;
		atack : boolean;
	end;

	//new image 


	TheroImage = record
		heroStay : pointer;
		heroAtackRight1  : pointer;
		heroAtackRight2 : pointer;
		heroAtackRight3 : pointer;
		heroAtackRight4 : pointer;
		heroAtackleft1 : pointer;
		heroAtackleft2 : pointer;
		heroAtackleft3 : pointer;
		heroAtackleft4 : pointer;
		heroMoveLefr : pointer;
		heroMoveRight : pointer; //add image here
	end;

	THero = record
		position : TPosition;
		sprite : THeroSprite;
		speed : Integer;
		atack : boolean;
		atackSide : string;
		takeDamege : boolean;
		moveSide : Integer;
		image : TheroImage; //добавили сюда подгрузку картинок
	end;

	TEnemy = record
		position : TPosition;
		colision: boolean;
		hitOnHero: boolean;
		atackIsMine :boolean;
		enemyTakeDemage : boolean;
		image: pointer;
	end;

	TAEnemyMelee = array[0..CountOfEnemy] of TEnemy; 


var
	timeOfHeroHit, timeOfHitEnemy, i: Integer;
	Hero : Thero;
	EnemySpeed: real;
	AEnemyMelee:TAEnemyMelee;
	
procedure StartGraphics();
var
	gm,gd: smallInt;
	res: Boolean;
	i:Integer;
begin
	gd := Nopalette;	
	gm := m800x600;
	InitGraph(gd,gm, '');

//добавление новой подгрузки изображений
//подгрузка изображений героя

	res := LoadImage(Hero.image.heroMoveLefr,'img/Hero/HeroStayLeft.bmp');
	if res = false then
	begin
		halt;
	end;


	res := LoadImage(Hero.image.heroMoveRight,'img/Hero/HeroStayRight.bmp' );
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackleft1,'img/Hero/HeroAtackLeft1.bmp');
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackleft2,'img/Hero/HeroAtackLeft2.bmp');
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackleft3,'img/Hero/HeroAtackLeft3.bmp');
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackleft4,'img/Hero/HeroAtackLeft4.bmp' );
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackRight1,'img/Hero/HeroAtackRight1.bmp' );
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackRight2,'img/Hero/HeroAtackRight2.bmp' );
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackRight3,'img/Hero/HeroAtackRight3.bmp' );
	if res = false then
	begin
		halt;
	end;

	res := LoadImage(Hero.image.heroAtackRight4,'img/Hero/HeroAtackRight4.bmp' );
	if res = false then
	begin
		halt;
	end;

	//подгрузка изображения противника

	for i := 0 to CountOfEnemy do 
	begin
		res := LoadImage(AEnemyMelee[i].image,'img/meleeEnemy/MelleeMoveRight.bmp' );
		if res = false then
		begin
		halt;
		end;
	end;

	//графические обновления
	UpdateGraph(updateOff);
	//очистить экран
	cleardEvice();

	UpdateGraph(updateNow);

end;

procedure drawSky();
begin
	setColor(blue);//sky
	setFillstyle(1, blue);
	bar(0,0,800,184);
end;

procedure drawGarden();
begin
	setColor(darkgreen);//garden
	setFillstyle(1, darkgreen);
	bar(0,185,800,600);	
end;

procedure drowBackground();
begin
	drawSky();
	drawGarden();
end;

function heroAtackSide(): boolean; //проверяет герой ли попал по врагам
var
	i: Integer;
begin
	for i := 0 to CountOfEnemy do
	begin 	
		if (hero.atackSide = 'right') and ((Hero.position.x - AEnemyMelee[i].position.x) < 0) then
		begin
			heroAtackSide:=true;
		end
		else if (hero.atackSide = 'left') and  ((Hero.position.x - AEnemyMelee[i].position.x) > 0 ) then
		begin
			heroAtackSide:=true;
		end 
		else
		begin
			heroAtackSide:=false;
			Hero.atack:=False;
		end;
	end; 
end;

procedure drawSpriteHero(var hero:Thero);
begin
	if (hero.moveSide = 1) and (timeOfHeroHit<1) then   //left
	begin
		PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroMoveLefr);
	end
	else if (hero.moveSide <> 1) and (timeOfHeroHit<1) then 
	begin
		PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroMoveRight);
	end;

	if timeOfHeroHit>0 then 
	begin
		if (Hero.atackSide = 'left') then 
		begin
			if timeOfHeroHit>30 then
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackleft1);
			end
			else if timeOfHeroHit>20 then 
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackleft2);
			end
			else if timeOfHeroHit>10 then
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackleft3);
			end 
			else
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackleft4);
			end;
		end
		else if (Hero.atackSide = 'right') then
		begin
			if timeOfHeroHit>30 then
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackRight1);
			end
			else if timeOfHeroHit>20 then 
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackRight2);
			end
			else if timeOfHeroHit>10 then
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackRight3);
			end 
			else
			begin
			PutImageTransparent(round(hero.position.x)-30, round(hero.position.y)-30, Hero.image.heroAtackRight4);
			end;
		end;
	end;
end;

function hitEnemy(): boolean;
var
	i: Integer;
begin
	hitEnemy:=false;

	for i := 0 to CountOfEnemy do 
	begin
		
		if (((Abs(hero.position.x-AEnemyMelee[i].position.x)<40) and (Abs(hero.position.y-AEnemyMelee[i].position.y)<65))) then		
		begin
			if (timeOfHitEnemy>0) then
			begin
				dec(timeOfHitEnemy);
				AEnemyMelee[i].atackIsMine:=false;
				if (timeOfHitEnemy=0) then
				begin
					hitEnemy:=true;
					timeOfHitEnemy:=150;
					AEnemyMelee[i].atackIsMine:=true;
				end;
			end;
		end;
	end;
end;

procedure NotColisionSprite(var arr:TAEnemyMelee);
var
	i: Integer;
begin
	for i := 0 to CountOfEnemy do 
	begin
		if	(((hero.position.x+20) >= (AEnemyMelee[i].position.x-20)) and 
			((hero.position.x-20) <= (AEnemyMelee[i].position.x+20)) and
			((hero.position.y+20) >= (AEnemyMelee[i].position.y-20)) and
			((hero.position.y-20) <= (AEnemyMelee[i].position.y+20))) then
		begin
			AEnemyMelee[i].colision:=true; //не соприкосаюстся можно двигаться
		end
		else
		begin
			AEnemyMelee[i].colision:=false; //соприкосаются двигаться нельзя
		end;
	end
end;

function colisionHeroWithEnemy(var arr:TAEnemyMelee):boolean;
var
	i: Integer;
begin
	colisionHeroWithEnemy:=false;
	for i := 0 to CountOfEnemy do
	begin
	 	if (arr[i].colision = true) then
	 	begin
	 	 	colisionHeroWithEnemy:=true;
	 	end; 
	end; 
end;

procedure moveMeleeEnemy(var arr:TAEnemyMelee);
var
	i: Integer;
begin
	for i := 0 to CountOfEnemy do
	begin
		if (arr[i].colision = false) then
		begin
		 	if ((arr[i].position.x-hero.position.x)>0)  then
		 	begin
		 		arr[i].position.x :=arr[i].position.x - EnemySpeed;
		 	end
		 	else
		 	begin
		 		arr[i].position.x :=arr[i].position.x + EnemySpeed;
		 	end;

		 	if ((arr[i].position.y - Hero.position.y)>0)  then 
		 	begin
		 		arr[i].position.y:=arr[i].position.y - EnemySpeed;
		 	end
		 	else
		 	begin
		 		arr[i].position.y:=arr[i].position.y + EnemySpeed;
		 	end;
		end
	end; 
end;

procedure drawSpriteEnemy(var arr:TAEnemyMelee);
var
	i: Integer;
	MelleeMoveRight:pointer;
begin
	moveMeleeEnemy(AEnemyMelee);
	for i := 0 to CountOfEnemy do 
	begin		
	PutImageTransparent(round(arr[i].position.x)-30, round(arr[i].position.y)-40, AEnemyMelee[i].image);
	end;
end;

procedure enemyTakeDemage(var enemy:TAEnemyMelee);
var
	i: Integer;
begin

	if (timeOfHeroHit>0) then
	begin

		dec(timeOfHeroHit);
		
		for i := 0 to CountOfEnemy do 
		begin
			if	(((hero.position.x - enemy[i].position.x)>-55) and 
				((hero.position.x - enemy[i].position.x)<-35) and 
				(Abs(hero.position.y - enemy[i].position.y)<60) and 
				(hero.atackSide='right')) or
				 (((hero.position.x - enemy[i].position.x)>35) and 
				 ((hero.position.x - enemy[i].position.x)<55) and 
				(Abs(hero.position.y - enemy[i].position.y)<60) and 
				(hero.atackSide='left'))
				 then
			begin
				enemy[i].enemyTakeDemage:=true;
			end	
			else
			begin
				enemy[i].enemyTakeDemage:=false;
			end;
		end;
	end;
end;

procedure spawnNewEnemy();
var
	i , tmpEnemySide: Integer;
begin
	for i := 0 to CountOfEnemy do
	begin
		 if (AEnemyMelee[i].enemyTakeDemage) then
		 begin
			randomize;
			 tmpEnemySide:=random(2);
			 if (tmpEnemySide=0) then
			 begin
			 	AEnemyMelee[i].position.x := -20;
			 	AEnemyMelee[i].position.y := random(400)+200;
			 end
			 else
			 begin
			 	AEnemyMelee[i].position.x := 820;
			 	AEnemyMelee[i].position.y := random(400)+200;
			end;
		end;
	end;
end;

function Keyboard():boolean;
var button: char;

begin
	keyboard:=false;

	if keypressed() then
	begin
		button:=readkey();
		case button of
			chr(27): keyboard:=true;
			'w': if (hero.position.y > 95) then
				begin
					//hero.position.y:=hero.position.y-hero.speed;
					if not ( colisionHeroWithEnemy(AEnemyMelee)) then  //скорее всего надо удалить
					begin //скорее всего надо удалить
					 	hero.position.y:=hero.position.y-hero.speed; 
					end; 
			 	end; 
			's': if (hero.position.y < 510)  then 
				begin
					//hero.position.y:=hero.position.y+hero.speed;
					if not ( colisionHeroWithEnemy(AEnemyMelee)) then //скорее всего надо удалить
					begin 
						hero.position.y:=hero.position.y+hero.speed -2; 
					end;
				end;
			'a': if (hero.position.x > 40) then 
				begin
					//hero.position.x:=hero.position.x-hero.speed;
					if  not( colisionHeroWithEnemy(AEnemyMelee)) then //скорее всего надо удалить
					begin 
						hero.position.x:=hero.position.x-hero.speed +2;
						hero.moveSide := 1; //left
					end; 
				end;
			'd': if (hero.position.x < 760) then 
					begin
						//hero.position.x:=hero.position.x+hero.speed;
						if  not ( colisionHeroWithEnemy(AEnemyMelee)) then //скорее всего надо удалить
						begin 
							hero.position.x:=hero.position.x+hero.speed-2; 
							hero.moveSide := 2;
						end; 
					end;
			'e': begin
				timeOfHeroHit:=40;
				Hero.atackSide:='right';
			end;
			'q': begin
				timeOfHeroHit:=40;
				Hero.atackSide:='left';
			end;
		end;
	end;
end;

//main procedure
begin
	StartGraphics();


	UpdateGraph(UpdateOff);
	ClearDevice();


	hero.position.x:=200; 
	hero.position.y:=400;
	EnemySpeed:=0.1;
	hero.speed:=3;
	hero.moveSide := 1;

	AEnemyMelee[0].position.x:=500; 
	AEnemyMelee[0].position.y:=500;
	AEnemyMelee[0].colision:=false;
	AEnemyMelee[0].hitOnHero:=false;

	AEnemyMelee[1]:=AEnemyMelee[0];
	AEnemyMelee[1].position.x:=0;



	timeOfHitEnemy:=150;

	while true do
	begin

		NotColisionSprite(AEnemyMelee);

		drowBackground();
	

		drawSpriteEnemy(AEnemyMelee);

		enemyTakeDemage(AEnemyMelee);
		spawnNewEnemy();

		drawSpriteHero(Hero);

		if (hitEnemy()) then

			for i := 0 to CountOfEnemy do
			begin
				if (AEnemyMelee[i].atackIsMine = true) then 
				begin
					if hero.position.x > AEnemyMelee[i].position.x then
					begin
						Hero.position.x := Hero.position.x+50;
					end
					else
					begin
						Hero.position.x := Hero.position.x-50;
					end
				end
			end;

		UpdateGraph(UpdateNow);
		Delay(10); 

		UpdateGraph(UpdateOff);

		if (Keyboard()) then
		begin
			break;			
		end;

		if Hero.position.x>800 then
		begin
			hero.position.x:=100;
		end;

		if Hero.position.x<0 then
		begin
			hero.position.x:=300;
		end;
	end;

	readkey();
	closegraph();
end.